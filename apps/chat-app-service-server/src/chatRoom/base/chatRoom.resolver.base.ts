/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChatRoom } from "./ChatRoom";
import { ChatRoomCountArgs } from "./ChatRoomCountArgs";
import { ChatRoomFindManyArgs } from "./ChatRoomFindManyArgs";
import { ChatRoomFindUniqueArgs } from "./ChatRoomFindUniqueArgs";
import { CreateChatRoomArgs } from "./CreateChatRoomArgs";
import { UpdateChatRoomArgs } from "./UpdateChatRoomArgs";
import { DeleteChatRoomArgs } from "./DeleteChatRoomArgs";
import { Message } from "../../message/base/Message";
import { User } from "../../user/base/User";
import { ChatRoomService } from "../chatRoom.service";
@graphql.Resolver(() => ChatRoom)
export class ChatRoomResolverBase {
  constructor(protected readonly service: ChatRoomService) {}

  async _chatRoomsMeta(
    @graphql.Args() args: ChatRoomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChatRoom])
  async chatRooms(
    @graphql.Args() args: ChatRoomFindManyArgs
  ): Promise<ChatRoom[]> {
    return this.service.chatRooms(args);
  }

  @graphql.Query(() => ChatRoom, { nullable: true })
  async chatRoom(
    @graphql.Args() args: ChatRoomFindUniqueArgs
  ): Promise<ChatRoom | null> {
    const result = await this.service.chatRoom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChatRoom)
  async createChatRoom(
    @graphql.Args() args: CreateChatRoomArgs
  ): Promise<ChatRoom> {
    return await this.service.createChatRoom({
      ...args,
      data: {
        ...args.data,

        message: args.data.message
          ? {
              connect: args.data.message,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ChatRoom)
  async updateChatRoom(
    @graphql.Args() args: UpdateChatRoomArgs
  ): Promise<ChatRoom | null> {
    try {
      return await this.service.updateChatRoom({
        ...args,
        data: {
          ...args.data,

          message: args.data.message
            ? {
                connect: args.data.message,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChatRoom)
  async deleteChatRoom(
    @graphql.Args() args: DeleteChatRoomArgs
  ): Promise<ChatRoom | null> {
    try {
      return await this.service.deleteChatRoom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Message, {
    nullable: true,
    name: "message",
  })
  async getMessage(
    @graphql.Parent() parent: ChatRoom
  ): Promise<Message | null> {
    const result = await this.service.getMessage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: ChatRoom): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
